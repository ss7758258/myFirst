<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    ">

	<!-- redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>


	<!--配置RedisClusterConfiguration-->
	<!--<bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		&lt;!&ndash;<property name="maxRedirects" value="${redis.maxRedirects}"></property>&ndash;&gt;
		<property name="clusterNodes">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.hostName1}"/>
					<constructor-arg name="port" value="${redis.port1}"/>
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.hostName2}"/>
					<constructor-arg name="port" value="${redis.port2}"/>
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.hostName3}"/>
					<constructor-arg name="port" value="${redis.port3}"/>
				</bean>
			</set>
		</property>
	</bean>-->


	<!-- redis集群配置 哨兵模式 -->
	<!-- <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
         <property name="master">
             <bean class="org.springframework.data.redis.connection.RedisNode">
                 &lt;!&ndash;这个值要和Sentinel中指定的master的值一致，不然启动时找不到Sentinel会报错的&ndash;&gt;
                 <property name="name" value="${redis.sentinel.master}"></property>
             </bean>
         </property>
         &lt;!&ndash;记住了,这里是指定Sentinel的IP和端口，不是Master和Slave的&ndash;&gt;
         <property name="sentinels">
             <set>
                 <bean class="org.springframework.data.redis.connection.RedisNode">
                     <constructor-arg name="host" value="${redis.sentinel.host1}"></constructor-arg>
                     <constructor-arg name="port" value="${redis.sentinel.port1}"></constructor-arg>
                 </bean>
                 <bean class="org.springframework.data.redis.connection.RedisNode">
                     <constructor-arg name="host" value="${redis.sentinel.host2}"></constructor-arg>
                     <constructor-arg name="port" value="${redis.sentinel.port2}"></constructor-arg>
                 </bean>
                 <bean class="org.springframework.data.redis.connection.RedisNode">
                     <constructor-arg name="host" value="${redis.sentinel.host3}"></constructor-arg>
                     <constructor-arg name="port" value="${redis.sentinel.port3}"></constructor-arg>
                 </bean>
             </set>
         </property>
     </bean>-->

<!-- 直接连接代理 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" ></constructor-arg>
		<property name="password" value="${redis.password}" />
		<property name="hostName" value="${redis.hostName}" />
		<property name="port" value="${redis.port}" />
		 <!-- <constructor-arg name="sentinelConfig" ref="sentinelConfiguration"></constructor-arg>-->
		<!--<constructor-arg name="clusterConfig" ref="redisClusterConfiguration"></constructor-arg>-->
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory"   ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
	</bean>
	
 	<!-- 通过zk获取代理 -->
	<!-- <bean id="jodisTemplate" class = "com.yeting.web.dao.redis.JodisTemplate">
		<property name="password" value="${redis.password}" />
		<property name="path" value="${redis.zkPath}" />
		<property name="zkHost" value="${redis.zkhost}" />
	
	</bean>  -->


</beans>